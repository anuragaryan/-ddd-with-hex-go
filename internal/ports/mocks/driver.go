// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	todo "github.com/anuragaryan/ddd-with-hex-go/internal/application/domain/todo"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIPort is a mock of APIPort interface.
type MockAPIPort struct {
	ctrl     *gomock.Controller
	recorder *MockAPIPortMockRecorder
}

// MockAPIPortMockRecorder is the mock recorder for MockAPIPort.
type MockAPIPortMockRecorder struct {
	mock *MockAPIPort
}

// NewMockAPIPort creates a new mock instance.
func NewMockAPIPort(ctrl *gomock.Controller) *MockAPIPort {
	mock := &MockAPIPort{ctrl: ctrl}
	mock.recorder = &MockAPIPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIPort) EXPECT() *MockAPIPortMockRecorder {
	return m.recorder
}

// AddItemToList mocks base method.
func (m *MockAPIPort) AddItemToList(id, item string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToList", id, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItemToList indicates an expected call of AddItemToList.
func (mr *MockAPIPortMockRecorder) AddItemToList(id, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToList", reflect.TypeOf((*MockAPIPort)(nil).AddItemToList), id, item)
}

// CreateList mocks base method.
func (m *MockAPIPort) CreateList(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateList indicates an expected call of CreateList.
func (mr *MockAPIPortMockRecorder) CreateList(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockAPIPort)(nil).CreateList), name)
}

// GetAllItemsFromAList mocks base method.
func (m *MockAPIPort) GetAllItemsFromAList(id string) ([]todo.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItemsFromAList", id)
	ret0, _ := ret[0].([]todo.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItemsFromAList indicates an expected call of GetAllItemsFromAList.
func (mr *MockAPIPortMockRecorder) GetAllItemsFromAList(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItemsFromAList", reflect.TypeOf((*MockAPIPort)(nil).GetAllItemsFromAList), id)
}

// GetList mocks base method.
func (m *MockAPIPort) GetList(id string) (*todo.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", id)
	ret0, _ := ret[0].(*todo.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockAPIPortMockRecorder) GetList(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockAPIPort)(nil).GetList), id)
}

// GetLists mocks base method.
func (m *MockAPIPort) GetLists() ([]todo.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists")
	ret0, _ := ret[0].([]todo.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockAPIPortMockRecorder) GetLists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockAPIPort)(nil).GetLists))
}
